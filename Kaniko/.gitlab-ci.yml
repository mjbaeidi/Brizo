stages:
  - build
  - test
  - deploy-stage
  - deploy-prod

variables:
  IMAGE_NAME: "registry.okcs.com/containers-okcs/flask-apm-app"
  IMAGE_TAG: "$CI_COMMIT_TAG"
  DOCKER_TLS_CERTDIR: ""
  # Cache settings for Docker layers
  DOCKER_BUILDKIT: 1
  DOCKER_DRIVER: overlay2

default:
  tags:
    - docker
  image: 
    name: docker:24.0.5
    pull_policy: if-not-present
  services:
    - name: docker:24.0.5-dind
      command: ["--storage-driver=overlay2"]

# Define a .before_script template to avoid repetition
.before_script_template: &before_script_def
  before_script:
    - echo "10.192.30.201 registry.okcs.com" >> /etc/hosts
    # Pre-login to registry to pull cache images faster
    - docker login -u "admin" -p "$JFROG_REGISTRY_PASSWORD" registry.okcs.com || echo "Login failed, will retry during push stage"

# Cache for apk packages
.apk_cache: &apk_cache
  cache:
    key: apk-packages
    paths:
      - /var/cache/apk

.apk_cache_git: &apk_cache_git
  cache:
    key: apk-packages-git
    paths:
      - /var/cache/apk

build:
  stage: build
  rules:
  - if: $CI_COMMIT_TAG
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    pull_policy: if-not-present
    entrypoint: [""]
  services: []
  script:
    - echo "10.192.30.201 registry.okcs.com" >> /etc/hosts
    # Create auth.json for Kaniko to authenticate with registry
    - |
      cat > /kaniko/.docker/config.json <<EOF
      {
        "auths": {
          "registry.okcs.com": {
            "username": "admin",
            "password": "$JFROG_REGISTRY_PASSWORD"
          }
        }
      }
      EOF

    # Run Kaniko build
    - /kaniko/executor 
      --context "${CI_PROJECT_DIR}" 
      --build-arg DOCKERTAG=$IMAGE_TAG 
      --dockerfile Dockerfile 
      --destination $IMAGE_NAME:$IMAGE_TAG 
      --destination $IMAGE_NAME:latest 
      --cache=true
  retry: 2


test:
  stage: test
  rules:
    - if: $CI_COMMIT_TAG
  <<: *before_script_def
  <<: *apk_cache
  script:
    - mkdir -p /var/cache/apk
    - apk update
    - apk add curl
    - docker pull $IMAGE_NAME:$IMAGE_TAG
    - docker run -d --name test-container -p 5000:5000 $IMAGE_NAME:$IMAGE_TAG
    - |
      for i in $(seq 1 30); do
        if curl -s http://docker:5000 >/dev/null; then
          echo "Service is up"
          break
        fi
        echo "Waiting for service to start... ($i/30)"
        sleep 1
        if [ $i -eq 30 ]; then
          echo "Service failed to start"
          exit 1
        fi
      done
  after_script:
    - docker stop test-container || true
    - docker rm test-container || true

deploy-stage:
  stage: deploy-stage
  rules:
    - if: $CI_COMMIT_TAG
  <<: *apk_cache_git
  dependencies: []
  script:
    - apk update
    - apk add git
    - git config --global http.sslVerify false
    - git clone https://token:$GITLAB_ACCESS_TOKEN@gitlab.brizo.me/brizogroup/manifests.git
    - cd manifests/Flaskapp-Helm
    - 'sed -i "s/tag: .*/tag: $IMAGE_TAG/" values-stage.yaml'
    - git config --global user.email "ci@example.com"
    - git config --global user.name "CI Bot"
    - git add values-stage.yaml
    - git commit -m "Update image tag to $IMAGE_TAG"
    - git push https://token:$GITLAB_ACCESS_TOKEN@gitlab.brizo.me/brizogroup/manifests.git

deploy-prod:
  stage: deploy-prod
  rules:
    - if: $CI_COMMIT_TAG
  <<: *apk_cache_git
  dependencies: []
  script:
    - apk update
    - apk add git
    - git config --global http.sslVerify false
    - git clone https://token:$GITLAB_ACCESS_TOKEN@gitlab.brizo.me/brizogroup/manifests.git
    - cd manifests/Flaskapp-Helm
    - 'sed -i "s/tag: .*/tag: $IMAGE_TAG/" values-prod.yaml'
    - git config --global user.email "ci@example.com"
    - git config --global user.name "CI Bot"
    - git add values-prod.yaml
    - git commit -m "Update image tag to $IMAGE_TAG"
    - git push https://token:$GITLAB_ACCESS_TOKEN@gitlab.brizo.me/brizogroup/manifests.git
  when: manual